name: typst-cn-news::deploy

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  pages: write
  id-token: write
  contents: read

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "deploy"
  cancel-in-progress: false

jobs:
  deploy-cf:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set Node.js 22.x
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
      - name: Install packages
        run: npm install
      - name: Build
        run: npm run build
      - name: Copy Static Assets
        run: |
          cp -r ./assets/ ./dist
      - name: Fix links
        run: |
          find ./dist -type f -name '*.html' -exec sed -i 's/href="\/dist/href="/g' {} \;
          find ./dist -type f -name '*.html' -exec sed -i 's/src="\/dist/src="/g' {} \;
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          projectName: typst-doc-cn-news
          directory: "./dist"
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
  deploy-vercel:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set Node.js 22.x
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
      - name: Install packages
        run: npm install
      - name: Build
        run: npm run build -- --url-base=/news/
      - name: Copy Static Assets
        run: |
          cp -r ./assets/ ./dist
      - name: Fix links
        run: |
          find ./dist -type f -name '*.html' -exec sed -i 's/href="\/assets/href="\/news\/assets/g' {} \;
          find ./dist -type f -name '*.html' -exec sed -i 's/src="\/assets/src="\/news\/assets/g' {} \;
          find ./dist -type f -name '*.html' -exec sed -i 's/href="\/dist/href="\/news/g' {} \;
          find ./dist -type f -name '*.html' -exec sed -i 's/src="\/dist/src="\/news/g' {} \;
      - name: Deploy to Vercel
        env:
          VERCEL_JSON: ${{ secrets.VERCEL_JSON }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          mkdir -p .vercel
          echo $VERCEL_JSON > .vercel/project.json
          npx vercel --prod --token $VERCEL_TOKEN
